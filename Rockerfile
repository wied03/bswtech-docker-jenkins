FROM quay.io/brady/bswtech-docker-base:1.0.37

MOUNT .:/src

ENV JENKINS_HOME /var/jenkins_home
ENV JENKINS_SLAVE_AGENT_PORT 50000
# from RPM
ENV JENKINS_APP_DIR {{ .JenkinsBinDir }}/app
ENV JENKINS_REF_DIR {{ .JenkinsBinDir }}/ref
ENV JENKINS_PLUGIN_DIR {{ .JenkinsBinDir }}/plugins
ARG JENKINS_WAR_FILE={{ .JenkinsBinDir }}/jenkins.war

RUN curl http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo -o /etc/yum.repos.d/jenkins.repo \
 && rpm --import /src/jenkins-ci.org.key \
 # Tomcat is more controllable than the Winstone hack Jenkins comes with
 # And it's an existing RPM within the CentOS ecosystem (security notifications, etc.)
 && yum_check.sh {{ .JavaPackage }} jenkins-{{ .JenkinsVersion }} {{ .GitPackage }} tomcat-7.0.69-11.el7_3 unzip \
 # trading in faster startup for image size
 && unzip ${JENKINS_WAR_FILE} -d ${JENKINS_APP_DIR} \
 # See above for why no Winstone
 && rm ${JENKINS_WAR_FILE} ${JENKINS_APP_DIR}/winstone.jar \
 && ln -s ${JENKINS_APP_DIR} /var/lib/tomcat/webapps/ROOT \
 && yum remove -y unzip \
 && yum clean all \
 && yum autoremove -y \
 && rm -rfv /tmp/*

# Now pre-load our plugins into the image
# zip/unzip executing plugin download/setup
RUN yum install -y unzip zip \
 # If our install plugins list changes, we need to force a rebuild with this hash since the Rockerfile will not change
 && INSTALLED_PLUGINS_FILE={{ .InstalledPluginsFile }} bash /src/plugins/install-plugins.sh {{ .PluginHash }} \
 && mkdir ${JENKINS_PLUGIN_DIR} \
 && mv ${JENKINS_REF_DIR}/*.jpi ${JENKINS_PLUGIN_DIR} \
 && cd ${JENKINS_PLUGIN_DIR} \
 # Expand all the plugins. Jenkins insists on a timestamp
 && for i in *; do unzip -q ${i} -d "${i%.jpi}"; touch "${i%.jpi}/.timestamp2"; done \
 # If Jenkins is not doing the plugin archive expansion, it expects .jpi "files" to be directories
 && rm ${JENKINS_PLUGIN_DIR}/*.jpi \
 && for i in *; do mv ${i} "${i}.jpi"; done \
 # only temp utilities
 && yum remove -y unzip zip \
 && yum clean all \
 && yum autoremove -y \
 && rm -rf /tmp/*

# RPM puts a user in there but we want control over the GID
RUN userdel -r jenkins \
 && groupadd -g {{ .JenkinsGid }} {{ .JenkinsGroup }} \
 && useradd -d ${JENKINS_HOME} -u {{ .JenkinsUid }} -g {{ .JenkinsGid }} -m -s /bin/bash {{ .JenkinsUser }} \
 && mkdir -p $JENKINS_REF_DIR/init.groovy.d \
 && chown -R {{ .JenkinsUser }} ${JENKINS_HOME} "$JENKINS_REF_DIR" \
 # Keep track of version in the footer
 && printf ".jenkins_ver:after {\n        content: \" - I{{ .ImageVersion }}\";\n}\n" >> ${JENKINS_APP_DIR}/css/layout-common.css \
 && cp -v /src/resources/*.properties /etc/tomcat/ \
 && cp -v /src/resources/server.xml /etc/tomcat/ \
 && cp -v /src/resources/jenkins.sh /usr/local/bin/ \
 # Our own plugin manager to deal with pre-loaded plugins
 && cp -v /src/build/libs/bswtech-docker-jenkins.jar ${JENKINS_APP_DIR}/WEB-INF/lib/ \
 && cp -v /src/resources/init.groovy $JENKINS_REF_DIR/init.groovy.d/tcp-slave-agent-port.groovy \
 && rm -rfv /usr/share/tomcat/work \
 && rm /etc/tomcat/tomcat-users.xml \
 && chown -Rv {{ .JenkinsUser }}.{{ .JenkinsGroup }} /var/cache/tomcat

VOLUME ["${JENKINS_HOME}"]

ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log
USER {{ .JenkinsUser }}

EXPOSE 8080

ENTRYPOINT ["/bin/tini", "-v", "--", "/usr/local/bin/jenkins.sh"]

LABEL Version={{ .ImageVersion }}

TAG {{ .ImageTag }}
